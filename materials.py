import numpy as np
import sys

def reorder(input_vec, output_index):
    output_vec = np.empty(21)
    for i, j in enumerate(output_index):
        output_vec[j - 1] = input_vec[i]
    return output_vec

def get_materials_Tvec(material):

    '''
    1 - TapeTape2021 rotated matrices
    2 - TapeTape2021 principal matrices
    3 - TapeTape2022 elasticity tensors from ES_RefMatricesForCollage.nb
    4 - Test matrices from TapeTape2022
    5 - Closest elasticity tensors to a tensor with trivial symmetry far from the monoclinic class (Values taken from ES_FarFromMONO_n2000.pdf)
    6 - Test matrices from exam
    '''

    s1 = 1
    s2 = np.sqrt(2)
    s3 = np.sqrt(3)
    s6 = np.sqrt(6)
    s8 = np.sqrt(8)

    if material == "TapeTape2021_rotated":

        TRIV = (1/5) * np.array([ 5, 0, 0, -2,  0, 0,
                                     6, 0,  0, -2, 0,
                                        5,  0,  0, 0,
                                            5,  0, 0,
                                                6, 0,
                                                   6])

        MONO = (1/80) * np.array([ 222*s1, -12*s6, -82*s1,  21*s6, -39*s2,   0*s1,
                                           196*s1,  12*s6,  30*s1,  10*s3, -16*s1,
                                                   222*s1,   9*s6, -51*s2,   0*s1,
                                                           242*s1,  -6*s3, -24*s1,
                                                                   254*s1,  -8*s3,
                                                                           304*s1])

        ORTH = (1/10) * np.array([ 38*s1, 18*s1,  3*s2, -5*s2,   -s6,   -s8,
                                          38*s1,  3*s2,  5*s2,   -s6,   -s8,
                                                 41*s1,  0*s1, -7*s3,  6*s1,
                                                        20*s1,  0*s1,  0*s1,
                                                               27*s1, -2*s3,
                                                                      56*s1])

        TET  = (1/64) * np.array([ 168*s1,   4*s6, -40*s1,   6*s6,   6*s2,   0*s1,
                                           324*s1,  -4*s6, -42*s1, -14*s3,  16*s3,
                                                   168*s1,  -6*s6,  -6*s2,   0*s1,
                                                           233*s1,  35*s3,  -8*s3,
                                                                   163*s1,  -8*s1,
                                                                           352*s1])

        CUBE = (1/36) * np.array([ 52*s1,  4*s1, 16*s1, -6*s1, -2*s3,   0*s1,
                                          64*s1,  4*s1, 12*s1,  4*s3,   0*s1,
                                                 52*s1, -6*s1, -2*s3,   0*s1,
                                                        45*s1,  3*s3,   0*s1,
                                                               39*s1,   0*s1,
                                                                      108*s1])

        TRIG = (1/16) * np.array([ 32-4*s3,   -8*s1,  3*s2, -6*s2, -3*s6,  0*s1,
                                            32+4*s3,  3*s2,  6*s2, -3*s6,  0*s1,
                                                     76*s1, -2*s3, 12*s3,  4*s3,
                                                            24*s1,  6*s1,  0*s1,
                                                                   52*s1,  4*s1,
                                                                          88*s1] )

        XISO = (1/128) * np.array([ 532*s1,  92*s3, 122*s1,  -2*s3,  -60*s1,  48*s1,
                                            348*s1,  -2*s3, 126*s1,  -20*s3,  16*s3,
                                                    349*s1,  31*s3, -126*s1,  24*s1,
                                                            287*s1,  -42*s3,   8*s3,
                                                                     212*s1, -16*s1,
                                                                             704*s1])

        ISO  = np.array([ 1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0,
                                1, 0, 0, 0,
                                   1, 0, 0,
                                      1, 0,
                                         3])

        return TRIV, MONO, ORTH, TET, CUBE, TRIG, XISO, ISO

    if material == "TapeTape2021_principal":

        TRIV = (1/5) * np.array([ 5, 0, 0, -2,  0, 0,
                                     6, 0,  0, -2, 0,
                                        5,  0,  0, 0,
                                            5,  0, 0,
                                                6, 0,
                                                   6])

        MONO = (1/20) * np.array([ 50+15*s3,      -15,  0,  0,  0,  0,
                                             50-15*s3,  0,  0,  0,  0,
                                                       64,  0,  0, -8,
                                                           76, 12,  0,
                                                               44,  0,
                                                                   76])

        ORTH = (1/5) * np.array([ 10,  0, 0,  0,     0,     0,
                                      15, 0,  0,     0,     0,
                                          5,  0,     0,     0,
                                             28,  2*s3,     2,
                                                    24, -2*s3,
                                                           28])

        TET  = (1/2) * np.array([ 4, 0, 0, 0,  0,  0,
                                     4, 0, 0,  0,  0,
                                        8, 0,  0,  0,
                                           6,  0,  0,
                                              11, -1,
                                                  11])

        CUBE = np.array([ 1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0,
                                1, 0, 0, 0,
                                   2, 0, 0,
                                      2, 0,
                                         3])

        TRIG = (1/2) * np.array([ 3, 0, s3,  0,  0,  0,
                                     3,  0, s3,  0,  0,
                                         5,  0,  0,  0,
                                             5,  0,  0,
                                                11, -1,
                                                    11])

        XISO = (1/2) * np.array([ 2, 0, 0, 0,  0,  0,
                                     2, 0, 0,  0,  0,
                                        6, 0,  0,  0,
                                           6,  0,  0,
                                              11, -1,
                                                  11])

        ISO  = np.array([ 1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0,
                                1, 0, 0, 0,
                                   1, 0, 0,
                                      1, 0,
                                         3])

        return TRIV, MONO, ORTH, TET, CUBE, TRIG, XISO, ISO

    elif material == "TapeTape2022_collage":

        TRIV = np.array([ 4.086056425972008000,  0.010701286581823899, -0.476223441320207000, 0.917018260845806500, -0.818564693235128500, -0.340248312771245900,
                                                 4.672938167924996000, -0.376834406989721540, 0.293522876341346550, -0.962574548964882000, -1.612273033526386400,
                                                                        2.510880008024643400, 0.026713327098956616,  0.512096098591872400,  0.694367252861254700,
                                                                                              4.216229915649152000,  0.384331609719862900,  0.173061012583925920,
                                                                                                                     2.986133113121339600,  0.097534355871519480,
                                                                                                                                            2.527762369307859000])

        MONO = np.array([ 1.250000000000000000, -0.433012701892219300,  0                   ,  0                   ,  0                   , 0                   ,
                                                 1.750000000000000200,  0                   ,  0                   ,  0                   , 0                   ,
                                                                        4.635052873539182000, -0.064686449064606410, -0.750293377816586700, 0.155272382921874950,
                                                                                               4.265283351323687000,  0.776026174574774100, 1.081879633193907800,
                                                                                                                      4.243583384280638500, 0.056114869469269024,
                                                                                                                                            4.856080390856493000])

        ORTH = np.array([ 1, 0, 0, 0                   ,  0                   ,  0                   ,
                             3, 0, 0                   ,  0                   ,  0                   ,
                                5, 0                   ,  0                   ,  0                   ,
                                   2.427256325043446200, -0.323382239501930900,  0.207742446456421100,
                                                          1.614722521590946900, -0.140890855884923730,
                                                                                 3.958021153365611800])

        TET  = np.array([ 1, 0, 0, 0, 0,  0,
                             1, 0, 0, 0,  0,
                                3, 0, 0,  0,
                                   6, 0,  0,
                                      5, -1,
                                          5])

        CUBE = np.array([ 1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0,
                                1, 0, 0, 0,
                                   2, 0, 0,
                                      2, 0,
                                         3])

        TRIG = np.array([ 1.500000000000000000,  0                   , -0.866025400000000000,  0                   ,  0                   ,  0                   ,
                                                 1.500000000000000000,  0                   , -0.866025400000000000,  0                   ,  0                   ,
                                                                        2.500000000000000000,  0                   ,  0                   ,  0                   ,
                                                                                               2.500000000000000000,  0                   ,  0                   ,
                                                                                                                      5.500000000000000000, -0.500000000000000000,
                                                                                                                                             5.500000000000000000])

        XISO = np.array([ 1, 0, 0, 0, 0, 0  ,
                             1, 0, 0, 0, 0  ,
                                2, 0, 0, 0  ,
                                   2, 0, 0  ,
                                      3, 2.5,
                                         4  ])

        ISO  = np.array([ 1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0,
                                1, 0, 0, 0,
                                   1, 0, 0,
                                      1, 0,
                                         3])

        return TRIV, MONO, ORTH, TET, CUBE, TRIG, XISO, ISO

    elif material == "TapeTape2022_test":

        T1vec = (1/128) * np.array([ 532*s1,  92*s3, 122*s1,  -2*s3,  -60*s1,  48*s1,
                                             348*s1,  -2*s3, 126*s1,  -20*s3,  16*s3,
                                                     349*s1,  31*s3, -126*s1,  24*s1,
                                                             287*s1,  -42*s3,   8*s3,
                                                                      212*s1, -16*s1,
                                                                              704*s1])

        T2vec = (1/64) * np.array([ 168*s1,   4*s6, -40*s1,   6*s6,   6*s2,   0*s1,
                                            324*s1,  -4*s6, -42*s1, -14*s3,  16*s3,
                                                    168*s1,  -6*s6,  -6*s2,   0*s1,
                                                            233*s1,  35*s3,  -8*s3,
                                                                    163*s1,  -8*s1,
                                                                            352*s1])

        T3vec = (1/320) * np.array([ 808*s1,    4*s6, -168*s1,    6*s6,   6*s2,    0*s1,
                                             1572*s1,   -4*s6, -282*s1, -94*s3,   80*s3,
                                                       808*s1,   -6*s6,  -6*s2,    0*s1,
                                                               1057*s1, 139*s3,  -40*s3,
                                                                        779*s1,  -40*s1,
                                                                                1760*s1])

        return T1vec, T2vec, T3vec

    elif material == "FarFromMONO":

        TRIV  = np.array([ 0.31708200, -0.00658517,  0.22786200,  0.21917600,  0.11476200, -0.24482300,
                                        0.07346000, -0.11485800, -0.02070150,  0.02757740, -0.14234200,
                                                     0.42042400,  0.21279300,  0.05286390,  0.12043800,
                                                                  0.24103100,  0.10226500, -0.16281800,
                                                                               0.09627170, -0.14736100,
                                                                                            0.64901000])

        MONO  = np.array([ 0.30453100, -0.04445250,  0.23883800,  0.18417100,  0.09108580, -0.18169800,
                                        0.10199400, -0.16294800, -0.04064210,  0.03111810, -0.14669500,
                                                     0.44764100,  0.19559300,  0.00627925,  0.17902700,
                                                                  0.19616900,  0.07340690, -0.09519940,
                                                                               0.09793330, -0.18417100,
                                                                                            0.64901000])

        ORTH  = np.array([ 0.32819100, -0.01518270,  0.23797500,  0.25159800,  0.03564770, -0.15428700,
                                        0.13682700, -0.06213200, -0.02213080,  0.04212710, -0.21736400,
                                                     0.31050700,  0.22668300,  0.02508750, -0.01148220,
                                                                  0.28432000,  0.04669110, -0.13660700,
                                                                               0.08842370, -0.14548700,
                                                                                            0.64901000])

        TET   = np.array([ 0.29491600, -0.04787780,  0.24597800,  0.21226700,  0.01517680, -0.08824300,
                                        0.16588200, -0.10772200, -0.04524340,  0.05081530, -0.24126800,
                                                     0.34913300,  0.22342700, -0.01561020,  0.06071490,
                                                                  0.24903900,  0.01171260, -0.07189800,
                                                                               0.08929750, -0.14812100,
                                                                                            0.64901000])

        CUBE  = np.array([ 0.21051900,  0.04499160,  0.12916000,  0.14135900,  0.05925590,  0.00000000,
                                        0.32138300, -0.10714800,  0.03043980,  0.17098800,  0.00000000,
                                                     0.25167700,  0.12622700, -0.03896390,  0.00000000,
                                                                  0.18948100,  0.04800570,  0.00000000,
                                                                               0.17520800,  0.00000000,
                                                                                            0.64901000])

        TRIG  = np.array([ 0.29898400,  0.07446800,  0.14747000,  0.25023500,  0.12149500, -0.16298400,
                                        0.13417600, -0.00379364,  0.09698110, -0.00111659, -0.04727210,
                                                     0.22286100,  0.15267000,  0.03240060, -0.10343300,
                                                                  0.30724500,  0.08161600, -0.16330700,
                                                                               0.18500300, -0.06859960,
                                                                                            0.64901000])

        XISO  = np.array([ 0.32052500,  0.05793800,  0.15921400,  0.21961300,  0.12242200, -0.15768600,
                                        0.15036500,  0.02560920,  0.08364730,  0.03772530, -0.04859230,
                                                     0.19542400,  0.16733600,  0.05284360, -0.10746900,
                                                                  0.32719800,  0.07759900, -0.15781400,
                                                                               0.15475600, -0.06907050,
                                                                                            0.64901000])

        ISO   = np.array([ 0.22965400,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,
                                        0.22965400,  0.00000000,  0.00000000,  0.00000000,  0.00000000,
                                                     0.22965400,  0.00000000,  0.00000000,  0.00000000,
                                                                  0.22965400,  0.00000000,  0.00000000,
                                                                               0.22965400,  0.00000000,
                                                                                            0.64901000])

        return TRIV, MONO, ORTH, TET, CUBE, TRIG, XISO, ISO

    elif material == "Test":

        T1vec = (1/16) * np.array([ 32*s1,  0*s1, -16*s1,  0*s1,  0*s1,   0*s1,
                                           60*s1,   0*s1, -6*s1, -2*s3, -40*s3,
                                                   32*s1,  0*s1,  0*s1,   0*s1,
                                                          43*s1,  9*s3,  20*s3,
                                                                 25*s1,  20*s1,
                                                                         32*s1])

        T2vec = np.array([ 1, 0, 0, 0, 0, 0,
                              1, 0, 0, 0, 0,
                                 3, 0, 0, 0,
                                    3, 0, 0,
                                       4, 5,
                                          2])

        T3vec = np.array([ 1, 0, 0, 0, 0, 0,
                              1, 0, 0, 0, 0,
                                 5, 0, 0, 0,
                                    3, 0, 0,
                                       4, 5,
                                          2])

        return T1vec, T2vec, T3vec

    else:

        sys.exit("Error: requested set index invalid")

def get_materials_Cvec(material):

    '''
    1 - Brown2016 matrices
    2 - Igel1995 matrices
    '''

    if material == "Brown":

        An = np.array([
        [[ 68.3, 0.8],[ 87.1, 1.3],[ 96.2, 1.6],[104.6, 1.9],[109.3, 1.7],[120.3, 4.2],[120.4, 2.6],[132.2, 3.0]],
        [[184.3, 4.9],[174.9, 5.2],[189.4, 4.9],[201.4, 6.6],[185.5, 2.3],[193.5, 4.4],[191.6, 6.3],[200.2, 5.4]],
        [[180.0, 3.0],[166.1, 4.7],[171.9, 4.5],[172.8, 5.1],[164.1, 1.9],[171.9, 5.0],[163.7, 5.0],[163.9, 4.1]],
        [[ 25.0, 0.1],[ 22.9, 0.2],[ 23.6, 0.1],[ 22.9, 0.1],[ 22.2, 0.1],[ 24.0, 0.1],[ 23.3, 0.1],[ 24.6, 0.1]],
        [[ 26.9, 0.1],[ 29.0, 0.2],[ 33.1, 0.3],[ 33.0, 0.3],[ 33.1, 0.2],[ 35.5, 0.3],[ 32.8, 0.3],[ 36.6, 0.2]],
        [[ 33.6, 0.2],[ 35.0, 0.3],[ 35.5, 0.3],[ 35.6, 0.2],[ 36.8, 0.3],[ 37.3, 0.4],[ 35.0, 0.5],[ 36.0, 0.3]],
        [[ 32.2, 1.6],[ 43.9, 2.0],[ 46.1, 2.5],[ 51.5, 2.8],[ 53.1, 1.1],[ 54.4, 3.7],[ 56.6, 3.4],[ 64.0, 3.5]],
        [[ 30.4, 1.5],[ 35.4, 1.9],[ 38.4, 2.2],[ 43.9, 2.4],[ 42.1, 2.1],[ 40.8, 3.2],[ 49.9, 2.9],[ 55.3, 2.8]],
        [[  5.0, 2.6],[ 18.0, 3.7],[ 15.4, 4.0],[ 14.5, 4.5],[ 21.9, 2.8],[ 16.1, 4.7],[ 26.3, 4.5],[ 31.9, 3.7]],
        [[ -2.3, 0.3],[ -0.4, 0.4],[ -0.2, 0.4],[  0.1, 0.5],[  1.2, 0.4],[  2.3, 1.0],[  3.2, 0.6],[  5.1, 0.6]],
        [[ -7.8, 0.7],[ -2.9, 0.8],[ -5.1, 1.1],[ -4.8, 1.2],[  0.7, 0.8],[  3.1, 1.6],[  5.4, 1.0],[  3.5, 0.9]],
        [[  7.5, 0.6],[  4.6, 0.8],[  7.2, 1.1],[  6.9, 1.0],[  2.5, 0.8],[  2.2, 1.5],[  1.7, 0.9],[  0.5, 0.9]],
        [[ -7.2, 0.1],[ -5.2, 0.2],[ -4.8, 0.2],[ -3.8, 0.2],[  1.4, 0.1],[  0.3, 0.2],[  0.9, 0.2],[ -2.2, 0.1]],
        [[  4.9, 0.2],[  6.1, 0.3],[  5.9, 0.3],[  6.5, 0.4],[  7.6, 0.3],[  9.2, 0.6],[  9.0, 0.5],[  9.5, 0.5]],
        [[ -0.9, 0.3],[ -0.6, 0.4],[ -0.4, 0.5],[ -0.8, 0.5],[ -7.7, 0.5],[-10.1, 1.4],[ -3.0, 0.6],[-10.8, 0.7]],
        [[ -4.4, 0.6],[ -5.9, 0.6],[ -7.0, 0.6],[ -2.4, 0.6],[ -2.9, 0.5],[  0.9, 1.0],[  2.1, 0.9],[  7.5, 0.6]],
        [[ -6.4, 0.9],[ -6.5, 0.9],[ -6.8, 1.2],[ -9.9, 1.2],[ -6.8, 1.1],[ -2.9, 2.1],[ -9.9, 1.3],[ -7.2, 1.3]],
        [[ -9.2, 0.4],[ -2.9, 0.5],[  2.2, 0.7],[ -0.4, 0.5],[  0.2, 0.5],[ -0.9, 1.0],[  1.7, 0.9],[  6.6, 0.6]],
        [[ -9.4, 0.6],[-10.7, 0.9],[ -9.8, 0.9],[ -5.7, 1.0],[  0.7, 0.8],[ -0.3, 1.2],[ -8.1, 1.1],[  1.6, 1.0]],
        [[ -2.4, 0.1],[ -1.3, 0.1],[ -1.1, 0.2],[ -1.0, 0.2],[  0.2, 0.1],[  0.7, 0.2],[  0.8, 0.1],[  3.0, 0.1]],
        [[  0.6, 0.1],[  0.8, 0.2],[  1.4, 0.2],[  2.1, 0.3],[  2.8, 0.2],[  3.2, 0.3],[  4.5, 0.3],[  5.2, 0.2]]])

        output_index = [1, 7, 12, 16, 19, 21, 2, 3, 8, 5, 10, 14, 18, 4, 6, 9, 11, 13, 15, 17, 20]

        An0  = reorder(An[:, 0, 0], output_index)
        An25 = reorder(An[:, 1, 0], output_index)
        An37 = reorder(An[:, 2, 0], output_index)
        An48 = reorder(An[:, 3, 0], output_index)
        An60 = reorder(An[:, 4, 0], output_index)
        An67 = reorder(An[:, 5, 0], output_index)
        An78 = reorder(An[:, 6, 0], output_index)
        An96 = reorder(An[:, 7, 0], output_index)

        An0_stdv  = 1/2 * reorder(An[:, 0, 1], output_index)
        An25_stdv = 1/2 * reorder(An[:, 1, 1], output_index)
        An37_stdv = 1/2 * reorder(An[:, 2, 1], output_index)
        An48_stdv = 1/2 * reorder(An[:, 3, 1], output_index)
        An60_stdv = 1/2 * reorder(An[:, 4, 1], output_index)
        An67_stdv = 1/2 * reorder(An[:, 5, 1], output_index)
        An78_stdv = 1/2 * reorder(An[:, 6, 1], output_index)
        An96_stdv = 1/2 * reorder(An[:, 7, 1], output_index)

        return (An0 , An0_stdv , An25, An25_stdv, An37, An37_stdv, An48, An48_stdv, An60, An60_stdv, An67, An67_stdv,
                An78, An78_stdv, An96, An96_stdv)

    elif material == "Igel":

        Cvec = np.array([10.0,  3.50, 2.50, -5.000,  0.10,  0.300,
                                8.00, 1.50,  0.200, -0.10, -0.150,
                                      6.00,  1.000,  0.40,  0.240,
                                             5.000,  0.35,  0.525,
                                                     4.00, -1.000,
                                                            3.000])

        return Cvec

    elif material == "Aminzadeh":

        BUK = np.array([
        [89.80, 91.46, 92.78, 94.97, 99.38, 106.17, 108.45, 109.35],
        [78.88, 80.51, 81.40, 83.89, 89.13,  97.02,  99.18,  99.36],
        [45.05, 49.61, 54.65, 62.60, 72.92,  82.26,  84.24,  85.07],
        [19.68, 20.34, 21.08, 22.39, 24.02,  26.14,  26.63,  27.12],
        [21.79, 22.66, 23.03, 24.18, 26.07,  27.69,  28.43,  28.44],
        [28.55, 29.00, 29.41, 30.78, 32.52,  34.49,  35.02,  35.45],
        [27.02, 27.74, 27.91, 27.30, 28.57,  32.04,  32.99,  33.25],
        [14.85, 17.35, 19.05, 22.93, 27.53,  33.54,  33.91,  34.13],
        [16.66, 18.97, 20.57, 24.35, 29.92,  34.97,  36.04,  36.00],
        [ 0.41,  0.16, -0.11,  0.57,  0.24,   0.35,   0.10,  -0.09],
        [-0.51, -0.65, -0.66,  0.32,  0.30,   0.18,  -0.41,   0.42],
        [-1.06, -0.64, -0.69, -0.59, -0.33,  -0.49,   0.44,  -0.43],
        [ 0.05,  0.05,  0.09,  0.33,  0.46,   0.31,   0.36,   0.47],
        [ 3.78,  3.09,  2.87, -2.34, -3.07,  -3.33,   3.71,  -3.76],
        [-0.02, -0.16, -0.40, -0.38, -0.36,  -0.24,   0.31,  -0.38],
        [-0.91, -0.68, -0.70, -0.41, -0.20,  -0.12,  -0.06,  -0.01],
        [-0.55, -0.36, -0.19,  0.11,  0.51,   0.36,  -0.39,   0.33],
        [ 3.08,  2.26,  2.80,  2.53,  2.02,   2.26,  -2.03,   2.36],
        [-0.93, -0.66, -0.63, -0.58, -0.64,  -0.80,   0.52,  -0.75],
        [-1.66, -1.06, -1.16,  1.48,  1.46,   2.25,  -2.10,   2.25],
        [ 1.32,  1.11,  1.34, -0.42, -0.76,  -0.74,  -0.70,  -0.84]])

        GRM = np.array([
        [48.16, 54.38, 66.76, 74.09, 79.97, 104.40, 112.58, 114.68],
        [44.60, 51.84, 64.94, 71.30, 76.48, 101.01, 108.76, 112.45],
        [23.07, 34.51, 48.43, 57.00, 63.29,  96.23, 105.92, 110.49],
        [10.63, 11.90, 14.43, 17.41, 19.05,  27.36,  32.17,  35.48],
        [ 7.67, 11.59, 16.86, 19.93, 22.97,  32.02,  36.08,  36.97],
        [13.85, 16.83, 18.96, 22.11, 24.97,  31.68,  37.35,  38.12],
        [19.34, 20.17, 25.81, 26.57, 27.12,  35.85,  34.90,  35.20],
        [13.23, 16.93, 20.41, 22.36, 23.44,  34.53,  37.02,  35.89],
        [10.81, 17.68, 23.70, 25.37, 25.54,  39.77,  38.09,  32.87],
        [-1.18,  0.27, -0.57,  0.26, -0.96,  -0.76,  -0.07,  -0.53],
        [ 0.06, -0.23,  0.58,  0.34,  0.16,  -0.09,   0.19,   0.32],
        [-0.30,  0.24, -0.05,  0.41, -0.73,  -0.12,  -1.12,   0.76],
        [ 0.53, -0.30, -0.64,  0.40,  0.11,   0.30,  -0.92,   0.12],
        [-1.70,  1.98, -0.03, -0.65, -0.95,  -1.09,  -1.03,   1.06],
        [ 0.43, -0.21, -0.47,  0.43, -0.06,  -0.50,   0.48,   0.37],
        [-0.29,  0.35,  0.73, -0.16,  0.29,  -0.45,   0.65,   0.42],
        [ 0.36, -0.14, -0.28,  0.12,  0.28,   0.52,   0.38,  -0.31],
        [-0.98, -1.87, -0.57, -0.03,  0.59,   0.05,   0.97,  -3.03],
        [ 0.73,  1.80,  1.62, -1.65,  1.00,   1.19,   0.31,   0.77],
        [ 0.85, -1.25, -0.56, -0.28,  0.07,   0.24,  -0.11,  -1.08],
        [ 0.70, -0.38,  0.40, -0.75,  0.16,   1.07,   0.60,  -0.56]])

        output_index = [1, 7, 12, 16, 19, 21, 2, 3, 8, 4, 5, 6, 9, 10, 11, 13, 14, 15, 17, 18, 20]

        BUK_01  = reorder(BUK[:,0], output_index)
        BUK_2   = reorder(BUK[:,1], output_index)
        BUK_5   = reorder(BUK[:,2], output_index)
        BUK_10  = reorder(BUK[:,3], output_index)
        BUK_20  = reorder(BUK[:,4], output_index)
        BUK_50  = reorder(BUK[:,5], output_index)
        BUK_80  = reorder(BUK[:,6], output_index)
        BUK_100 = reorder(BUK[:,7], output_index)

        GRM_01  = reorder(GRM[:, 0], output_index)
        GRM_5   = reorder(GRM[:, 1], output_index)
        GRM_10  = reorder(GRM[:, 2], output_index)
        GRM_15  = reorder(GRM[:, 3], output_index)
        GRM_20  = reorder(GRM[:, 4], output_index)
        GRM_50  = reorder(GRM[:, 5], output_index)
        GRM_80  = reorder(GRM[:, 6], output_index)
        GRM_100 = reorder(GRM[:, 7], output_index)

        return BUK_01, BUK_2, BUK_5, BUK_10, BUK_20, BUK_50, BUK_80, BUK_100, GRM_01, GRM_5, GRM_10, GRM_15, GRM_20, \
            GRM_50, GRM_80, GRM_100

    elif material == "Lokajicek":

        WG2D = np.array([
        [57.6, 49.5, 33.0,  8.7],
        [59.8, 51.2, 34.1,  8.6],
        [60.8, 52.2, 35.3,  8.9],
        [19.9, 17.0, 11.5,  3.0],
        [19.9, 17.1, 11.6,  3.0],
        [19.8, 17.0, 11.5,  3.0],
        [19.5, 16.8, 11.0,  3.1],
        [19.5, 16.7, 11.5,  3.0],
        [ 0.3,  0.3,  0.4,  0.0],
        [ 1.4,  1.4,  0.8,  0.3],
        [ 1.9,  1.8,  1.3,  0.7],
        [19.8, 16.8, 11.8,  3.1],
        [ 0.4,  0.2, -0.4,  0.0],
        [ 0.6,  0.6,  0.3,  0.1],
        [ 1.5,  1.6,  1.4,  0.5],
        [ 0.4,  0.1, -0.2, -0.2],
        [ 2.0,  1.7,  1.2,  0.4],
        [ 1.2,  0.9,  1.0,  0.5],
        [ 0.2,  0.1,  0.2,  0.1],
        [ 0.1,  0.1,  0.1,  0.0],
        [ 0.1,  0.1,  0.1,  0.0]])

        WG100 = np.array([
        [47.6, 101.4],
        [16.7,  34.8],
        [16.3,  34.4],
        [ 0.1,   0.2],
        [-1.1,   0.6],
        [-2.0,   0.7],
        [51.1, 100.8],
        [16.8,  33.4],
        [ 0.0,   0.9],
        [-0.6,   0.9],
        [-2.1,   1.0],
        [51.7, 104.4],
        [ 0.2,   0.9],
        [-1.8,   0.4],
        [-1.2,   0.4],
        [16.8,  34.1],
        [-0.2,   0.1],
        [-0.2,   0.2],
        [16.8,  34.3],
        [ 0.1,   0.0],
        [16.8,  34.4]])

        WG600 = np.array([
        [ 3.5,  99.5],
        [ 1.3,  32.8],
        [ 1.3,  33.0],
        [ 0.0,   0.7],
        [-0.2,  -0.2],
        [-0.5,   0.8],
        [ 3.4,  99.3],
        [ 1.2,  33.2],
        [-0.1,   1.0],
        [-0.1,   0.5],
        [-0.4,   1.0],
        [ 3.4, 102.3],
        [-0.1,   0.6],
        [-0.2,   0.0],
        [-0.2,   0.7],
        [ 1.2,  33.5],
        [ 0.0,   0.1],
        [ 0.0,   0.1],
        [ 1.2,  33.5],
        [ 0.0,   0.1],
        [ 1.3,  33.4]])

        output_index = [1, 7, 12, 16, 19, 21, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20]

        WG2D_100 = reorder(WG2D[:, 0], output_index)
        WG2D_200 = reorder(WG2D[:, 1], output_index)
        WG2D_400 = reorder(WG2D[:, 2], output_index)
        WG2D_600 = reorder(WG2D[:, 3], output_index)

        # Note that these maps don't need reordering
        WG100_01  = WG100[:, 0]
        WG100_400 = WG100[:, 1]
        WG600_01  = WG600[:, 0]
        WG600_400 = WG600[:, 1]

        return WG2D_100, WG2D_200, WG2D_400, WG2D_600, WG100_01, WG100_400, WG600_01, WG600_400

    else:

        sys.exit("Error: requested set index invalid")